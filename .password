#!/usr/bin/python

""" command line password manager using python and AES encryption

author: Dayne Jones
date: 13-August-2014

"""
import getpass
import hashlib
import pickle

from Crypto.Cipher import AES
from Crypto import Random


class PasswordManager():
    """ Password tools and utilities """
    def get_pass(self, message):
        password = getpass.getpass(message)
        return password

    def read_password(self, message="Enter a website: "):
        encryption_key = self.get_pass("Enter your encryption password: ")
        website = raw_input(message).lower()
        try:
            with open('.password_file', 'r') as f:
                password_data = f.read()
                try:
                    # if password file is empty
                    if not password_data.strip():
                        raise KeyError
                    password_data = self.decrypt(password_data, encryption_key)
                    password_dict = pickle.loads(password_data)
                    return password_dict[website]
                except KeyError:
                    print "Couldn't find website."
                    return False
        except IOError:
            print "No website file found. Try creating some new passwords."
            return False

    def save_new_password(self):
        website = raw_input("Enter a website: ").lower()
        password = self.get_pass("Enter the website's password: ")
        password2 = ""
        while password != password2:
            password2 = self.get_pass("Re-enter the password: ")

        encryption_key = self.get_pass("Enter an encryption key: ")
        encryption_key2 = ""
        while encryption_key != encryption_key2:
            encryption_key2 = self.get_pass("Re-enter the encryption key: ")

        with open('.password_file', 'w+') as f:
            password_data = f.read()
            # if password file is empty, create a new dictionary
            if not password_data.strip():
                password_dict = dict()
            else:
                password_data = self.decrypt(password_data, encryption_key)
                password_dict = pickle.loads(password_data)

            password_dict[website] = password
            password_data = pickle.dumps(password_dict)
            password_data = self.encrypt(password_data, encryption_key)
            f.write(password_data)

        print "Successfully added password for " + website

    def pad_password(self, password):
        padded_pass = hashlib.sha256(password).hexdigest()
        return padded_pass

    # pads input out to AES block size by adding zeros
    def pad(self, s):
        return s + b"\0" * (AES.block_size - len(s) % AES.block_size)

    def encrypt(self, message, key):
        key = self.pad_password(key)[:16]
        message = self.pad(message)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(key, AES.MODE_CBC, iv)
        return iv + cipher.encrypt(message)

    def decrypt(self, ciphertext, key):
        key = self.pad_password(key)[:16]
        iv = self.pad(ciphertext)[:AES.block_size]
        cipher = AES.new(key, AES.MODE_CBC, iv)
        plaintext = cipher.decrypt(ciphertext[AES.block_size:])
        # removes zeros from plaintext and returns
        return plaintext.rstrip(b"\0")


def manage_passwords():
    try:
        # prompt user to either read or create password entries
        prompt = "Enter 1 to read a password,"
        prompt += " 2 to create a new password entry: "
        choice = int(raw_input(prompt))
        if choice == 1:
            password = None
            password = password_manager.read_password()
            if not password:
                manage_passwords()
                return
            print "Your password is: " + password
        elif choice == 2:
            password_manager.save_new_password()
        else:
            raise ValueError
    # if choice is invalid, tell user then restart the program
    except ValueError:
        print "invalid choice"
        manage_passwords()

password_manager = PasswordManager()
manage_passwords()
